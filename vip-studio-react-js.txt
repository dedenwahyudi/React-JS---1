CARA INSTALL REACT JS.
   1. download & install node.js
   2. download & install vite.js (react murni)
   3. - terminal : npm create vite@latest my-react-app -- --template react
      - terminal : cd my-react-app
      - terminal : npm install
      - terminal : npm run dev
----------------------------------------------------------------------------------------------------------------------
CARA INSTALL TAILWIND CDD DI DALAM REACT JS.
   1. Buka link tailwind css : https://tailwindcss.com/
   2. Masuk ke menu Docs > Framework Guides
   3. Pilih Vite
   4. terminal : npm install -D tailwindcss postcss autoprefixer
      terminal : npx tailwindcss init -p
                 - otomatis akan meng-generate file (postcss.config.js dan tailwind.config.cjs)
   5. Buka file tailwind.config.cjs, lalu replace baris content menjadi :
      - content: ["./index.html", "./src/**/*.{js,ts,jsx,tsx}"]
   6. Buka file src/index.css.
      Hapus code yang ada, kemudian paste code berikut ini :
         @tailwind base;
         @tailwind components;
         @tailwind utilities;
   7. Delete file src/App.css
   8. Buka file scr/App.jcs,
      Hapus baris : import "./App.css";
   9. terminal : npm run dev
   10. Selesai
----------------------------------------------------------------------------------------------------------------------
EKSTENSI VS CODE.
   1. Codeium : AI Coding Autocomplete and Chat for Python, Javascript, Typescript, Java, Go, and more
   2. ES7+ : ES7+ React/Redux/React-Native snippets
----------------------------------------------------------------------------------------------------------------------
COMPONENTS.
Buat struktur folder didalam directory "src" :
   1. atoms (rename)=> Elements
      => element kecil seperti button, input, label dll
   2. molecules (delete)
      => element yang terdiri dari beberapa bagian seperti input yang lengkap dengan label
   3. organisms (rename)=> Fragments
      => form
   4. templates (rename)=> Layouts
   5. pages
      => untuk pages simpan didalam directory "src/pages"
----------------------------------------------------------------------------------------------------------------------
REACT ROUTER (LIBRARY).
Link Dokumentasi : https://reactrouter.com/en/main

Cara Install Library React Router :
   1. terminal : npm install react-router-dom
   2. tunggu sampai selesai mendownload
   3. import baris kode berikut ini didalam halaman utama (main.jsx) :
      import { createBrowserRouter, RouterProvider } from "react-router-dom";
   4. contoh sourcode yang sudah menerapkan react router untuk berpindah halaman (main.jsx) :

	import { createBrowserRouter, RouterProvider } from "react-router-dom";
	import LoginPage from "./pages/login.jsx";
	import RegisterPage from "./pages/register.jsx";
	import ErrorPage from "./pages/404.jsx";

	const router = createBrowserRouter([
  	   {
    	     path: "/",
    	     element: <div>Hello World!</div>,
    	     errorElement: <ErrorPage />,
  	   },
  	   {
    	     path: "/login",
    	     element: <LoginPage />,
  	   },
  	   {
    	     path: "/register",
    	     element: <RegisterPage />,
  	   },
	]);

	ReactDOM.createRoot(document.getElementById("root")).render(
  	   <React.StrictMode>
    	     <RouterProvider router={router} />
  	   </React.StrictMode>
	);

   5. ErrorPage, ketika halaman yang di akses tidak ada (404.jsx) :

	import { useRouteError } from "react-router-dom";

	const ErrorPage = () => {
  	   const error = useRouteError();

  	   return (
    	      <div className="flex justify-center min-h-screen items-center flex-col">
      	        <h1 className="text-3xl font-bold">Oops!</h1>
      	        <p className="my-5 text-xl">Sorry, an unexpected error has occured</p>
      	        <p className="text-lg">{error.statusText || error.message}</p>
    	       </div>
  	   );
	};

	export default ErrorPage;

CLIENT SIDE ROUTING.
Ini berfungsi ketika kita berpindah URL, tidak perlu meminta dokumen lain dari server (tanpa melakukan loading) :

   1. sourcode link to Register :
	import { Link } from "react-router-dom";

        Dont't have an account?{" "}
        <Link to="/register" className="font-bold text-blue-600">
          Register
        </Link>

   2. sourcode link to Login:
	import { Link } from "react-router-dom";

        Have an account?{" "}
        <Link to="/login" className="font-bold text-blue-600">
          Login
        </Link>
----------------------------------------------------------------------------------------------------------------------
CONDITIONAL RENDERING.
   1. studi kasus : misalkan kita memiliki komponen, mungkin saja komponen yang sama, tetapi ingin menampilkan
		    hal yang berbeda dengan kondisi tertentu.

   2. menggunakan ternary operator dan && :
      <p className="text-sm mt-5 text-center">
        {type === "login"
          ? "Dont't have an account? "
          : "Already have an account? "}

        {type === "login" && (
          <Link to="/register" className="font-bold text-blue-600">
            Register
          </Link>
        )}
        {type === "register" && (
          <Link to="/login" className="font-bold text-blue-600">
            Login
          </Link>
        )}
      </p>

   3. menggunakan If Statement :
      const Navigation = ({ type }) => {
        if (type === "login") {
          return (
            <p className="text-sm mt-5 text-center">
              Dont't have an account?{" "}
              <Link to="/register" className="font-bold text-blue-600">
                Register
              </Link>
            </p>
          );
        } else {
          return (
            <p className="text-sm mt-5 text-center">
              Already have an account?{" "}
              <Link to="/login" className="font-bold text-blue-600">
                Login
              </Link>
            </p>
          );
        }
      };
----------------------------------------------------------------------------------------------------------------------
NESTED COMPONENT.
Komponen yang berada didalam sebuah komponen.
Contoh : Ketika kita memiliki <AuthLayout />, kemudian didalam <AuthLayout /> kita punya sebuah komponen lagi yaitu
	 <FormLogin />

----------------------------------------------------------------------------------------------------------------------
NESTED COMPONENT.
Komponen yang berada didalam sebuah komponen.
Contoh : Ketika kita memiliki <AuthLayout />, kemudian didalam <AuthLayout /> kita punya sebuah komponen lagi yaitu
	 <FormLogin />
----------------------------------------------------------------------------------------------------------------------
RENDERING LIST.

import CardProduct from "../components/Fragments/CardProduct";

const products = [
  {
    id: 1,
    name: "Sepatu Baru",
    price: "Rp 1.000.000",
    image: "/public/images/shoes-1.jpg",
    description: `Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis eveniet
    soluta numquam sapiente voluptatum labore, suscipit repellat. Quasi
    hic, labore quidem, esse mollitia laborum est, asperiores facilis
    repellat explicabo omnis?`,
  },
  {
    id: 2,
    name: "Sepatu Lama",
    price: "Rp 500.000",
    image: "/public/images/shoes-1.jpg",
    description: `Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis eveniet
    soluta numquam sapiente voluptatum labore.`,
  },
  {
    id: 3,
    name: "Sepatu Adadong",
    price: "Rp 2.000.000",
    image: "/public/images/shoes-1.jpg",
    description: `Ini adalah sepatu baru dari brand adadong.`,
  },
];

const ProductsPage = () => {
  return (
    <div className="flex justify-center py-5">
      {products.map((product) => (
        <CardProduct>
          <CardProduct.Header image={product.image} />
          <CardProduct.Body name={product.name}>
            {product.description}
          </CardProduct.Body>
          <CardProduct.Footer price={product.price} />
        </CardProduct>
      ))}
    </div>
  );
};

export default ProductsPage;
----------------------------------------------------------------------------------------------------------------------
EVEN HANDLER.
   1. src/components/Fragments/FormLogin.jsx

      import Button from "../Elements/Button";
      import InputForm from "../Elements/Input";

      const FormLogin = () => {
        const handleLogin = (event) => {
          event.preventDefault();

          localStorage.setItem("email", event.target.email.value);
          localStorage.setItem("password", event.target.password.value);

          window.location.href = "/products";
        };

        return (
          <form onSubmit={handleLogin}>
            <InputForm
              label="Email"
              name="email"
              type="email"
              placeholder="example@mail.com"
            />
            <InputForm
              label="Password"
              name="password"
              type="password"
              placeholder="********"
            />
            <Button classname="bg-blue-600" type="submit">
              Login
            </Button>
          </form>
        );
      };

      export default FormLogin;

   2. src/pages/products.jsx

      import { Fragment } from "react";
      import CardProduct from "../components/Fragments/CardProduct";
      import Button from "../components/Elements/Button";

      const products = [
        {
          id: 1,
          name: "Sepatu Baru",
          price: "Rp 1.000.000",
          image: "/public/images/shoes-1.jpg",
          description: `Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis eveniet
            soluta numquam sapiente voluptatum labore, suscipit repellat. Quasi
            hic, labore quidem, esse mollitia laborum est, asperiores facilis
            repellat explicabo omnis?`,
        },
        {
          id: 2,
          name: "Sepatu Lama",
          price: "Rp 500.000",
          image: "/public/images/shoes-1.jpg",
          description: `Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis eveniet
            soluta numquam sapiente voluptatum labore.`,
        },
        {
          id: 3,
          name: "Sepatu Adadong",
          price: "Rp 2.000.000",
          image: "/public/images/shoes-1.jpg",
          description: `Ini adalah sepatu baru dari brand adadong.`,
        },
      ];

      const email = localStorage.getItem("email");

      const ProductsPage = () => {
        const handleLogout = () => {
          localStorage.removeItem("email");
          localStorage.removeItem("password");
          window.location.href = "/login";
        };

        return (
          <Fragment>
            <div className="flex justify-end h-20 bg-blue-600 text-white items-center px-10">
              {email}
              <Button classname="ml-5 bg-black" onClick={handleLogout}>
                Logout
              </Button>
            </div>
            <div className="flex justify-center py-5">
              {products.map((product) => (
                <CardProduct key={product.id}>
                  <CardProduct.Header image={product.image} />
                  <CardProduct.Body name={product.name}>
                    {product.description}
                  </CardProduct.Body>
                  <CardProduct.Footer price={product.price} />
                </CardProduct>
              ))}
            </div>
          </Fragment>
        );
      };

      export default ProductsPage;

   3. src/components/Elements/Button/index.jsx

      const Button = (props) => {
        const {
          children = "...",
          classname = "bg-black",
          onClick = () => {},
          type = "button",
        } = props;
        return (
          <button
            className={`h-10 px-6 font-semibold rounded-md ${classname} text-white`}
            type={type}
            onClick={() => onClick()}
          >
            {children}
          </button>
        );
      };

      export default Button;
----------------------------------------------------------------------------------------------------------------------
STATE.
State bisa dibilang sebuah memory, yang dimiliki oleh komponen.
Jadi didalam sebuah komponen, kita seringkali perlu mengubah apa yang ada didalam layar, seperti hasil/bentuk
dari interaksi. Mengetikkan sesuatu kedalam form, memindahkan carousel, mengklik button, menambahkan ke keranjang,
dan lain sebagainya.
Sehingga yang ditampilkan didalam layar akan lebih dinamis.

STATEFULL COMPONENT :
   Membuat sebuah komponen menggunakan class

STATELESS COMPONENT :
   Komponen yang kita buat menggunakan function

PERBEDAAN STATEFULL DAN STATELESS COMPONENT :
   - Jika ingin menggunakan State, itu tidak bisa kita menggunakan Stateless Component/Functional Component.
     Kita perlu menggunakan Statefull Component/Class Component


Contoh :

import React from "react";

class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0,
    };
  }

  render() {
    return (
      <div className="flex items-center">
        <h1 className="mr-5">{this.state.count}</h1>
        <button
          className="bg-black text-white p-3"
          onClick={() => this.setState({ count: this.state.count + 1 })}
        >
          +
        </button>
      </div>
    );
  }
}

export default Counter;
----------------------------------------------------------------------------------------------------------------------
USESTATE.
- Penggunaan State didalam Functional Component/Stateless Component, menggunakan (React Hook)
- HOOK merupakan sebuah tools yang dimiliki oleh React, dan banyak fungsi-fungsi yang dapat kita gunakan

* useState - 1 : jika mengklik button add to cart, dan jika produk yang sama yang di klik,
                 untuk yang ke 2x dan seterusnya list nya yang akan bertambah bukan qty nya
* useState - 2 : jika produk yang sama di klik add to cart maka yang bertabah qty nya bukan listnya
----------------------------------------------------------------------------------------------------------------------
LIFECYCLE :

Link : https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
----------------------------------------------------------------------------------------------------------------------
USE EFFECT.
Sebuah hooks yang bisa kita manfaatkan untuk memanipulasi komponen.
Manipulasi pada sebuah komponen dilakukan untuk sinkronisasi antar komponen.

- setiap useEffect mempunyai dependency, nilai dari dependency bisa saja kosong
  dependency tersebut digunakan untuk fungsi yang kedua yaitu componentDidUpdate

  - componentDidMount :
      componentDidMount() {
        this.setState({ count: 1 });
        console.log("componentDidMount");
      }

  - componentDidUpdate :
       componentDidUpdate(prevProps, prevState) {
          console.log("componentDidUpdate");
          if (this.state.count === 10) {
            this.setState({ count: 5 });
          }
        }

  - componentDidMount didalam useEffect :
      useEffect(() => {
        setCart([{ id: 1, qty: 3 }]);
      }, []);

  - componentDidUpdate didalam useEffect :
      useEffect(() => {
        const sum = cart.reduce((acc, item) => {
          const product = products.find((product) => product.id === item.id);
          return acc + product.price * item.qty;
        }, 0);
        setTotalPrice(sum);
      }, [cart]);
----------------------------------------------------------------------------------------------------------------------
USE REF.
Yang membedakan antara useRef dengan useState adalah.
jika menggunakan useRef :
  - tidak akan melakukan re-render komponen
    contoh : jika sebelumnya menggunakan useState ketika menambahkan produk jual kedalam cart, otomatis akan langsung
             di tampilkan di view barang yang di beli, qty dan jumlah harganya. sedangkan jika menggunakan useRef
             data akan di simpan kedalam local storage tetapi tidak akan di tampilkan kedalam view terlebih dahulu

Perbedaan useRef dengan useState.
   - useState : memiliki setter seperti setProduct
   - useRef : tidak memiliki setter, nilai sebelumnya langsung di timpa dengan nilai baru

useRef juga bisa digunakan untuk memanipulasi DOM menggunakan document.getElementById/ClassName/...

Study kasus :
   Ketika sebuah cart pada kerangjang belanja kosong, maka total price tidak usah di munculkan.

Contoh Penggunaan useRef pada Element DOM :

   <tr ref={totalPriceRef}>
   <tr />

   const totalPriceRef = useRef(null);

   useEffect(() => {
       if (cart.length > 0) {
         totalPriceRef.current.style.display = "table-row";
       } else {
         totalPriceRef.current.style.display = "none";
       }
   }, [cart]);

Catatan : Pada useRef jika kita ingin menggunakan ref={ref} didalam parameter component, tidak bisa begitu saja 
          di berikan seperti pada props pada umumnya, tetapi kita harus bungus kedalam forwardRef()
Contoh :

   import Label from "./Label";
   import Input from "./Input";
   import { forwardRef } from "react";

   const InputForm = forwardRef((props, ref) => {
     const { label, name, type, placeholder } = props;
     return (
       <div className="mb-6">
         <Label htmlFor={name}>{label}</Label>
         <Input
           name={name}
           type={type}
           placeholder={placeholder}
           ref={ref}
         ></Input>
       </div>
     );
   });

   export default InputForm;

----------------------------------------------------------------------------------------------------------------------
GET DATA API.

Link API : 
https://fakestoreapi.com/

Link :
https://www.npmjs.com/

Langkah-langkah menggunakan API call menggunakan Axios :
1. terminal : npm i axios
2. buat folder src > sercices
3. buat file di dalam folder services dengan nama "product.service.js"
4. didalam file "product.services.js" masukkan baris kode berikud ini untuk pemanggilan API :

   import axios from "axios";

   export const getProducts = (callback) => {
     axios
       .get("https://fakestoreapi.com/products")
       .then((res) => {
         callback(res.data);
       })
       .catch((err) => {
         console.log(err);
       });
   };

5. didalam file view atau "products.jsx" tambahkan state baru seperti berikut :

   const [products, setProducts] = useState([]);

   useEffect(() => {
     getProducts((data) => {
       setProducts(data);
     });
   }, []);
----------------------------------------------------------------------------------------------------------------------
POST DATA API.

https://jwt.io/

Decode Token (JWT) :
1. Buka : https://www.npmjs.com/package/jwt-decode
2. Terminal : npm i jwt-decode
----------------------------------------------------------------------------------------------------------------------
CUSTOM HOOKS.

Jika sebelumnya kita sudah mengenal useState, useEffect, useRef. Itu merupakan hooks yang dimiliki oleh react js atau
di sebut juga built in hook.

Kita juga bisa membuat hooks sendiri atau user define hooks.

Caranya :
1. buat folder baru didalam src dengan nama hooks (src/hooks)
2. buat sebuah file untuk menyimpan hooks (src/hooks/useLogin)
3. biasakan dalam membuath custom hooks dengan memberikan nama depan "use", untuk membedakan function biasa atau hook
4. contoh source code didalam file useLogin.jsx :

   import { useEffect, useState } from "react";
   import { getUsername } from "../services/auth.service";

   export const useLogin = () => {
     const [username, setUsername] = useState("");
     useEffect(() => {
       const token = localStorage.getItem("token");
       if (token) {
         setUsername(getUsername(token));
       } else {
         window.location.href = "/login";
       }
     }, []);

     return username;
   };

5. sourcode tersebut berfungsi untuk mengambil username dari generate token yang di dapatkan
6. kemudian setelah didapatkan username maka function useLogin() tersebut bisa di panggil di halaman manapun
7. kemudian di dalam file page/halaman yang dingin di tambahkan fungsi tersebut
   tinggal meng-import fungsi useLogin tersebut seperti berikut ini contoh source codenya :

   import { useLogin } from "../hooks/useLogin";
   const username = useLogin();

   return (
       <Fragment>
         <div className="flex justify-end h-20 bg-blue-600 text-white items-center px-10">
           {username}
           <Button classname="ml-5 bg-black" onClick={handleLogout}>
             Logout
           </Button>
         </div>
   );

8. kemudian di page/halaman yang berbeda juga bisa menambahkan nya :
   import { useLogin } from "../hooks/useLogin";

   const ProfilePage = () => {
     const username = useLogin();
     return (
       <div>
         <h1>Profile</h1>
         Username : {username}
       </div>
     );
   };

   export default ProfilePage;






